# built-in libraries
import math

# external libraries
import numpy

# internal libraries
from epicycle import gmat



def test_gmat_zero():
    O = gmat.zero()
    for i in range(gmat.GMAT_NDIM):
        for j in range(gmat.GMAT_NDIM):
            assert O[i][j] == 0.0



def test_gmat_eye():
    I = gmat.eye()
    for i in range(gmat.GMAT_NDIM):
        for j in range(gmat.GMAT_NDIM):
            assert I[i][j] == (1.0 if (i == j) else 0.0)


def test_gmat_pos():
    A = numpy.array([
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
    ])
    B = gmat.pos(A)
    for i in range(gmat.GMAT_NDIM):
        for j in range(gmat.GMAT_NDIM):
            assert B[i][j] == A[i][j]


def test_gmat_neg():
    A = numpy.array([
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
    ])
    B = gmat.neg(A)
    for i in range(gmat.GMAT_NDIM):
        for j in range(gmat.GMAT_NDIM):
            assert B[i][j] == - A[i][j]


def test_gmat_tr():
    A = numpy.array([
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
    ])
    s = gmat.tr(A)
    assert s == 1.0


def test_gmat__T():
    A = numpy.array([
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
    ])
    B = gmat.T(A)
    for i in range(gmat.GMAT_NDIM):
        for j in range(gmat.GMAT_NDIM):
            assert B[i][j] == A[j][i]


def test_gmat_add():
    A = numpy.array([
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
    ])
    B = numpy.array([
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
    ])
    C = gmat.add(A, B)
    for i in range(gmat.GMAT_NDIM):
        for j in range(gmat.GMAT_NDIM):
            assert C[i][j] == A[i][j] + B[i][j]


def test_gmat_sub():
    A = numpy.array([
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
    ])
    B = numpy.array([
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
    ])
    C = gmat.sub(A, B)
    for i in range(gmat.GMAT_NDIM):
        for j in range(gmat.GMAT_NDIM):
            assert C[i][j] == A[i][j] - B[i][j]


def test_gmat_muls():
    A = numpy.array([
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
    ])
    B = gmat.muls(A, 3.0)
    for i in range(gmat.GMAT_NDIM):
        for j in range(gmat.GMAT_NDIM):
            assert B[i][j] == 3.0 * A[i][j]


def test_gmat_mul():
    A = numpy.array([
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
    ])
    B = numpy.array([
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
    ])
    C = gmat.mul(A, B)
    for i in range(gmat.GMAT_NDIM):
        for j in range(gmat.GMAT_NDIM):
            assert C[i][j] == sum(
                A[i][k] * B[k][j] for k in range(gmat.GMAT_NDIM)
            )


def test_gmat_mulv():
    A = numpy.array([
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
    ])
    u_bar = numpy.array(
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0]
    )
    v_bar = gmat.mulv(A, u_bar)
    for i in range(gmat.GMAT_NDIM):
        assert v_bar[i] == sum(
            A[i][j] * u_bar[j] for j in range(gmat.GMAT_NDIM)
        )


def test_gmat_vmul():
    u_bar = numpy.array(
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0]
    )
    A = numpy.array([
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
        [1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0],
        [7.0, -6.0, 5.0, -4.0, 3.0, -2.0, 1.0, -2.0, 3.0, -4.0, 5.0, -6.0, 7.0],
    ])
    v_bar = gmat.vmul(u_bar, A)
    for i in range(gmat.GMAT_NDIM):
        assert v_bar[i] == sum(
            u_bar[j] * A[j][i] for j in range(gmat.GMAT_NDIM)
        )

